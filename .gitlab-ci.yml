image: python:3.7

stages:
  - initial
  - build
  - teardown
  - optional-postprocess
  - finish

buiild-and-deploy-pdf:
  image: tianon/latex
  stage: initial
  cache:
    paths:
      - gdrive
      - venv
  before_script:
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - python -m venv venv
    - source venv/bin/activate
    - pip install awscli
    - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - if [ ! -f "./gdrive" ]; then wget -O gdrive https://github.com/gdrive-org/gdrive/releases/download/2.1.0/gdrive-linux-x64 ; fi
    - chmod +x ./gdrive
    - mkdir -p ~/.gdrive && echo $GOOGLE_APP_AUTH > ~/.gdrive/token.json
  script:
    - cd docs
    - latexmk -bibtex -pdf -outdir=out/ paperwork.tex
    - cd out
    - makeindex paperwork.nlo -s nomencl.ist -o paperwork.nls
    - rm paperwork.aux || true
    - rm paperwork.lof || true
    - rm paperwork.blg || true
    - rm paperwork.out || true
    - rm paperwork.nlo || true
    - rm paperwork.pdf || true
    - rm paperwork.log || true
    - rm paperwork.toc || true
    - rm paperwork.fdb_latexmk || true
    - rm paperwork.fls || true
    - rm paperwork.bbl || true
    - cd ..
    - latexmk -bibtex -pdf -outdir=out/ paperwork.tex
    - texcount -inc paperwork.tex
    - cd ..
    - aws s3 sync ./docs/out s3://storage-zuffik/ --acl public-read --exclude "*" --include "paperwork.pdf"
    - ./gdrive -c ~/.gdrive --service-account token.json list
    - ./gdrive -c ~/.gdrive --service-account token.json update $GOOGLE_DRIVE_FILE_ID docs/out/paperwork.pdf
  artifacts:
    paths:
      - docs/out/paperwork.pdf
  when: manual

start-computing:
  stage: initial
  cache:
    paths:
      - venv
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - pip install awscli
    - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
  script:
    - aws ec2 start-instances --region us-east-1 --instance-ids "$AWS_EC2_COMPUTING_INSTANCE"
  when: manual

train-ann:
  tags:
    - zuffik-compute
  stage: build
  dependencies:
    - start-computing
  cache:
    paths:
      - venv
  before_script:
    - cd ai
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - chmod +x store-ann.sh
  script:
    - ./store-ann.sh
  artifacts:
    paths:
      - ai/models
  when: on_success

stop-computing-start-unity:
  stage: teardown
  dependencies:
    - train-ann
  cache:
    paths:
      - venv
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - pip install awscli
    - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
  script:
    - aws ec2 stop-instances --region us-east-1 --instance-ids "$AWS_EC2_COMPUTING_INSTANCE"
    - aws ec2 start-instances --region us-east-1 --instance-ids "$AWS_EC2_UNITY_INSTANCE"
  when: always

build-unity-after-train:
  tags:
    - zuffik-unity
  stage: optional-postprocess
  cache:
    paths:
      - game/Library
  artifacts:
    paths:
      - game/Build
  script:
    - start /b /wait "unity" "c:\Program Files\Unity\Hub\Editor\2019.3.6f1\Editor\Unity.exe" -batchmode -nographics -executeMethod BuildScript.PerformBuild -quit -projectPath game -logFile -
    - dir
    - cd game
    - dir
  when: on_success

stop-unity:
  stage: finish
  dependencies:
    - build-unity-after-train
  cache:
    paths:
      - venv
  before_script:
    - cd ai
    - python -m venv venv
    - source venv/bin/activate
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - pip install awscli
    - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
  script:
    - aws ec2 stop-instances --region us-east-1 --instance-ids "$AWS_EC2_UNITY_INSTANCE"
  when: always

start-unity-manual:
  stage: initial
  cache:
    paths:
      - venv
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - pip install awscli
    - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
  script:
    - aws ec2 start-instances --region us-east-1 --instance-ids "$AWS_EC2_UNITY_INSTANCE"
  when: manual

build-unity-manual:
  tags:
    - zuffik-unity
  stage: build
  dependencies:
    - start-unity-manual
  cache:
    paths:
      - game/Library
  artifacts:
    paths:
      - game/Build
  script:
    - start /b /wait "unity" "c:\Program Files\Unity\Hub\Editor\2019.3.6f1\Editor\Unity.exe" -batchmode -nographics -executeMethod BuildScript.PerformBuild -quit -projectPath game -logFile -
    - dir
    - cd game
    - dir
  when: on_success

stop-unity-manual:
  stage: teardown
  cache:
    paths:
      - venv
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - pip install awscli
    - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
  script:
    - aws ec2 stop-instances --region us-east-1 --instance-ids "$AWS_EC2_UNITY_INSTANCE"
  when: always